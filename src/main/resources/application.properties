spring.datasource.url=jdbc:postgresql://localhost:5432/todo_db
spring.datasource.username=postgres
spring.datasource.password=${todoapp_postgres_password}
spring.jpa.hibernate.ddl-auto=update
server.port=8081
mybatis.mapper-locations=classpath:/mappers/**/*.xml

# mapper.javaとmapper.xmlの紐づけ定義
spring.session.timeout=1800s
spring.data.redis.host=localhost
spring.data.redis.port=6379

# Debugモード
logging.level.org.springframework.security=debug
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.web.client.RestTemplate=DEBUG
logging.level.org.springframework.http.client.HttpClient=DEBUG
logging.level.org.springframework.web.reactive.function.client.WebClient=DEBUG


# OAuth2 Google
spring.security.oauth2.client.registration.google.client-id=616743398611-9fesrbggfp03dptsh8d4qia0ishe8kuh.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=${todoapp_google_client_secret}
spring.security.oauth2.client.registration.google.redirectUri={baseUrl}/oidc/token/{registrationId}
  #定義しない場合、デフォルトは、{baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.google.scope=openid,email,profile
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs
spring.security.oauth2.client.provider.google.issuer-uri=https://accounts.google.com
spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# OAuth LINE
spring.security.oauth2.client.registration.line.client-id=2004698361
spring.security.oauth2.client.registration.line.client-secret=${todoapp_line_client_secret}
spring.security.oauth2.client.registration.line.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.line.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.line.redirect-uri={baseUrl}/oidc/token/{registrationId}
spring.security.oauth2.client.registration.line.scope=profile
  # ,openid
  # TODO:スコープにopenidを追加する
  # email情報を取得したい場合は、LINEへ申請が必要
spring.security.oauth2.client.registration.line.provider=line
spring.security.oauth2.client.provider.line.user-name-attribute=userId
spring.security.oauth2.client.registration.line.client-name=LINE
spring.security.oauth2.client.provider.line.issuer-uri=https://access.line.me
spring.security.oauth2.client.provider.line.authorization-uri=https://access.line.me/oauth2/v2.1/authorize
spring.security.oauth2.client.provider.line.token-uri=https://api.line.me/oauth2/v2.1/token
spring.security.oauth2.client.provider.line.user-info-uri=https://api.line.me/v2/profile
# spring.security.oauth2.client.provider.line.user-info-authentication-method=query
spring.security.oauth2.client.provider.line.jwk-set-uri=https://api.line.me/oauth2/v2.1/certs

# OAuth BizSOL（開発者用ポータル）
spring.security.oauth2.client.registration.bizsol.client-id=66666666
spring.security.oauth2.client.registration.bizsol.client-secret=${todoapp_bizsol_client_secret}
  # アクセストークン取得時にAuthorizationヘッダのbasic認証として必要なトークンをbase64デコードした値をclient-id/client-scretに転記
spring.security.oauth2.client.registration.bizsol.scope=openid
spring.security.oauth2.client.registration.bizsol.client-name=bizsol
spring.security.oauth2.client.registration.bizsol.client-authentication-method=client_secret_basic
spring.security.oauth2.client.registration.bizsol.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.bizsol.redirect-uri={baseUrl}/oidc/token/{registrationId}
spring.security.oauth2.client.registration.bizsol.provider=bizsol
# spring.security.oauth2.client.provider.bizsol.issuer-uri=https://sample.apigw.opencanvas.ne.jp/bizsol/v1/banks/0010
spring.security.oauth2.client.provider.bizsol.authorization-uri=https://sample.apigw.opencanvas.ne.jp/bizsol/v1/banks/0010/oauth/auth
spring.security.oauth2.client.provider.bizsol.token-uri=https://sample.apigw.opencanvas.ne.jp/bizsol/v1/banks/0010/oauth/token
spring.security.oauth2.client.provider.bizsol.user-info-uri=https://sample.apigw.opencanvas.ne.jp/bizsol/v1/banks/0010/userinfo
  # トークンエンドポイントのレスポンスのscopeでprofileが入っていたときに、ユーザ情報エンドポイントへリクエストする模様
spring.security.oauth2.client.provider.bizsol.user-name-attribute=sub
spring.security.oauth2.client.provider.bizsol.jwk-set-uri=https://sample.apigw.opencanvas.ne.jp/bizsol/v1/banks/0010/oauth/public_keys

# OAuth BizSOL（モック）
spring.security.oauth2.client.registration.bizsol-mock.client-id=00000000
spring.security.oauth2.client.registration.bizsol-mock.client-secret=${todoapp_bizsol_mock_client_secret}
  # アクセストークン取得時にAuthorizationヘッダのbasic認証として必要なトークンをbase64デコードした値をclient-id/client-scretに転記
spring.security.oauth2.client.registration.bizsol-mock.scope=openid
spring.security.oauth2.client.registration.bizsol-mock.client-name=bizsol-mock
spring.security.oauth2.client.registration.bizsol-mock.client-authentication-method=client_secret_basic
spring.security.oauth2.client.registration.bizsol-mock.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.bizsol-mock.redirect-uri={baseUrl}/oidc/token/{registrationId}
spring.security.oauth2.client.registration.bizsol-mock.provider=bizsol-mock
# spring.security.oauth2.client.provider.bizsol-mock.issuer-uri=http://localhost:8082
spring.security.oauth2.client.provider.bizsol-mock.authorization-uri=http://localhost:8082/oauth/auth
spring.security.oauth2.client.provider.bizsol-mock.token-uri=http://localhost:8082/oauth/token
spring.security.oauth2.client.provider.bizsol-mock.user-info-uri=http://localhost:8082/userinfo
spring.security.oauth2.client.provider.bizsol-mock.user-name-attribute=sub
spring.security.oauth2.client.provider.bizsol-mock.jwk-set-uri=http://localhost:8082/oauth/public_keys



spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
